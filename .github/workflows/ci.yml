name: Download & Upload to GitHub Release

on:
  workflow_dispatch:
    inputs:
      mediafire_page_url:
        description: 'URL halaman MediaFire (halaman dengan tombol Download)'
        required: true
        default: ''
      release_tag:
        description: 'Tag rilis untuk mengunggah aset'
        required: true
        default: 'v1.0.0'
      asset_name:
        description: 'Nama file yang akan diunggah ke rilis (tanpa ekstensi)'
        required: true
        default: 'downloaded_file'

jobs:
  download_and_upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Direct Download URL from MediaFire Page
        id: extract_url
        run: |
          PAGE_URL="${{ github.event.inputs.mediafire_page_url }}"
          
          # Download the HTML content of the MediaFire page
          HTML_CONTENT=$(curl -s "$PAGE_URL")
          
          # Extract the download URL using grep. This pattern looks for a link that starts with "https://download" and ends with ".zip" or ".rar",
          # which is common for MediaFire direct download links. You might need to adjust this regex if MediaFire changes its HTML structure.
          DOWNLOAD_URL=$(echo "$HTML_CONTENT" | grep -o 'https?://[^"]*\.\(zip\|rar\)[^"]*' | head -n 1)
          
          # Extract the filename from the extracted URL
          FILENAME=$(echo "$DOWNLOAD_URL" | sed 's/.*\///')
          
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "ERROR: Could not extract download URL from the provided page."
            exit 1
          fi
          
          echo "Extracted Download URL: $DOWNLOAD_URL"
          echo "Extracted Filename: $FILENAME"
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
          echo "filename=$FILENAME" >> $GITHUB_OUTPUT

      - name: Download file from extracted URL
        run: |
          # Use the extracted URL to download the file
          # The -L flag is crucial here to follow any redirects
          curl -L -o "${{ github.event.inputs.asset_name }}.${{ steps.extract_url.outputs.filename }}" "${{ steps.extract_url.outputs.download_url }}"
          
      - name: Upload to GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.event.inputs.release_tag }}
          artifacts: "${{ github.event.inputs.asset_name }}.${{ steps.extract_url.outputs.filename }}"
          allowUpdates: true
