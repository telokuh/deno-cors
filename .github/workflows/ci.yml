name: Download MediaFire to GitHub Release

on:
  workflow_dispatch:
    inputs:
      mediafire_page_url:
        description: 'URL Halaman MediaFire (URL yang menampilkan tombol "Download")'
        required: true
        default: ''
      release_tag:
        description: 'Tag rilis untuk mengunggah aset'
        required: true
        default: 'v1.0.0'

jobs:
  download_and_upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install yt-dlp and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq
          sudo wget https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -O /usr/local/bin/yt-dlp
          sudo chmod a+rx /usr/local/bin/yt-dlp
          
      - name: Extract direct download URL and filename using yt-dlp
        id: get_download_info
        run: |
          PAGE_URL="${{ github.event.inputs.mediafire_page_url }}"
          
          # Add --force-generic-extractor to bypass specific extractors and use the generic one
          # Also, use --no-warnings to keep the output clean
          DOWNLOAD_INFO=$(yt-dlp --no-warnings --force-generic-extractor --print-json "$PAGE_URL")
          
          if [[ -z "$DOWNLOAD_INFO" ]]; then
            echo "Error: yt-dlp failed to get info from the page URL."
            exit 1
          fi

          # Extract URL and filename using jq
          DOWNLOAD_URL=$(echo "$DOWNLOAD_INFO" | jq -r '.url // ""')
          FILENAME=$(echo "$DOWNLOAD_INFO" | jq -r '._filename // ""')

          if [[ -z "$DOWNLOAD_URL" || "$DOWNLOAD_URL" == "null" ]]; then
            echo "Error: Could not extract download URL from the provided page."
            exit 1
          fi

          echo "Extracted Download URL: $DOWNLOAD_URL"
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
          echo "filename=$FILENAME" >> $GITHUB_OUTPUT

      - name: Download file with wget
        run: |
          wget -O "${{ steps.get_download_info.outputs.filename }}" "${{ steps.get_download_info.outputs.download_url }}"

      - name: Upload to GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.event.inputs.release_tag }}
          artifacts: "${{ steps.get_download_info.outputs.filename }}"
          allowUpdates: true
